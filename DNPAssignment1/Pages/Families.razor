@page "/Families"

@using Models
@using Blazor_Authentication.Data
@inject IFamilyManager familyManager
@inject NavigationManager navigationManager;

<h1>Family Forecast!</h1>

<p>This component is very cool, and has a list of families and their addresses!</p>

<h1>Filter Families</h1>
<p>
    Filter by Street Name: <input type="text" @oninput="@((arg) => FilterByStreetName(arg))" style="width:50px"/>
</p>
<p>
    Filter by House Number: <input type="number" @oninput="@((arg) => FilterByHouseNumber(arg))" style="width:50px"/>
</p>

@if (_familiesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_familiesToShow.Any())
{
    <p>
        <em>No families exist, please add families to our beautiful system</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>House number</th>
            <th>Street name</th>
            <th>Family name</th>
            <AuthorizeView>
                <th>Delete</th>
                <th>Edit</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>

        @foreach (var family in _familiesToShow)
        {
            <tr>
                <td>@family.HouseNumber</td>
                <td>@family.StreetName</td>
                <td>@family.GetFamilyName()</td>

                <AuthorizeView>
                    <td>
                        <button @onclick="@(() => familyManager.RemoveFamily(family))">
                            @* FIXME: Hører jeg til her? :( *@
                            <i class="oi oi-trash" style="color:green"/>
                        </button>
                    </td>
                    <td>
                        <button @onclick="@(() => EditFamily(family))">
                            <i class="oi oi-pencil" style="color:turquoise"/>
                        </button>
                    </td>
                </AuthorizeView>
                @* <td>@(family.Adults.Any() ? family.Adults.First().LastName : "No adults added")  </td> *@
            </tr>
        }
        </tbody>
    </table>
    
    
    <h1>Filter Adults</h1>
    <p>
        Filter by Family Name: <input type="text" @oninput="@((arg) => FilterByFamilyName(arg))" style="width:50px"/>
    </p>
    <p>
        Filter by First Name: <input type="text" @oninput="@((arg) => FilterByFirstName(arg))" style="width:50px"/>
    </p>
    <p>
        Filter by Job Name: <input type="text" @oninput="@((arg) => FilterByJobTitle(arg))" style="width:50px"/>
    </p>

    <table class="table">
        <thead>
        <tr>
            <th>JobTitle</th>
            <th>First name</th>
            <th>Family name</th>
        </tr>
        </thead>
        <tbody>

        
        @foreach (var adult in _adultsToShow)
        {
            <tr>
                <td>@adult.Job.JobTitle</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
            </tr>
        }

        </tbody>
    </table>
}

@code {

    private IList<Family> _families;
    private IList<Family> _familiesToShow;

    private IList<Adult> _adults;
    private IList<Adult> _adultsToShow;

    private string filterByStreetName;
    private int? filterByHouseNumber;

    protected override async Task OnInitializedAsync()
    {
    //_adults = familyManager.Adults;
        _families = familyManager.GetFamilies();
        _familiesToShow = _families;

        _adults = familyManager.GetAdults();
        _adultsToShow = _adults;
    }

    private void EditFamily(Family family)
    {
        navigationManager.NavigateTo($"EditFamily/{family.FamilyId}");
    }


    private void FilterByStreetName(ChangeEventArgs changeEventArgs)
    {
        try
        {
            filterByStreetName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine("Fuck jeg fejlede i filterByStreetName :((");
        }

        ExecuteFilterFamilies();
    }

    private void FilterByHouseNumber(ChangeEventArgs changeEventArgs)
    {
        filterByHouseNumber = null;

        try
        {
            filterByHouseNumber = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine("Fuck jeg fejlede i filterByHouseNumber");
        }

        ExecuteFilterFamilies();
    }

    private void ExecuteFilterFamilies()
    {
        _familiesToShow = _families.Where(t =>
            (filterByHouseNumber != null && t.HouseNumber == filterByHouseNumber || filterByHouseNumber == null) &&
            (filterByStreetName != null && t.StreetName.ToLower().Contains(filterByStreetName.ToLower()) || filterByStreetName == null)).ToList();
    }
    
    
    
    
    
    
    

    
    
    
    private string filterByJobTitle;
    private string filterByFirstName;
    private string filterByLastName;
    
    private void FilterByJobTitle(ChangeEventArgs changeEventArgs)
    {
        try
        {
            filterByJobTitle = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine("Fuck jeg fejlede i filterByStreetName :((");
        }

        ExecuteFilterAdults();
    }
    
    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        try
        {
            filterByFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine("Fuck jeg fejlede i filterByStreetName :((");
        }

        ExecuteFilterAdults();
    }
    
    private void FilterByFamilyName(ChangeEventArgs changeEventArgs)
    {
        try
        {
            filterByLastName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine("Fuck jeg fejlede i filterByStreetName :((");
        }

        ExecuteFilterAdults();
    }
    
    
    
    private void ExecuteFilterAdults()
    {
        _adultsToShow = _adults.Where(f =>
            (filterByLastName != null && f.LastName.ToLower().Contains(filterByLastName.ToLower()) || filterByLastName == null) &&
            (filterByFirstName != null && f.FirstName.ToLower().Contains(filterByFirstName.ToLower()) || filterByFirstName == null) &&
            (filterByJobTitle != null && f.Job.JobTitle.ToLower().Contains(filterByJobTitle.ToLower()) || filterByJobTitle == null)).ToList();
    }

}